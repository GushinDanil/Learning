Иногда бывает необходимо, чтобы объекты создавались в ответ на сложившие-
ся условия, которые невозможно предсказать на этапе разработки программы.
Фабричный шаблон проектирования позволяет реализовать такой подход.
В значительной степени благодаря высокой гибкости языка Python фабрики
могут принимать самые разнообразные формы, многие из которых вовсе не вы-
глядят чем-то особенным.
Классы – это объекты, поэтому их легко можно передавать между компонента-
ми программы, сохранять в структурах данных и так далее. Можно также пе-
редавать классы функциям, которые создают объекты произвольных типов, –
в кругах, связанных с ООП, такие функции иногда называют фабриками.
В языках со строгой типизацией, таких как C++, реализация таких функций –
достаточно сложная задача, но в языке Python она становится почти тривиаль-
ной. Синтаксическая конструкция, с которой мы познакомились в главе 18,
может вызывать любые классы с любым числом аргументов конструкторов за
один присест, генерируя экземпляр любого типа:1
def factory(aClass, *args): # Кортеж с переменным числом аргументов
return aClass(*args) # Вызов aClass (или apply, только в 2.6)
class Spam:
def doit(self, message):
print(message)
class Person:
def __init__(self, name, job):
self.name = name
self.job = job
object1 = factory(Spam) # Создать объект Spam
object2 = factory(Person, “Guido”, “guru”) # Создать объект Person
В этом фрагменте определена функция-генератор объектов с именем factory.
Она ожидает получить объект класса (любого) вместе с одним или более аргу-
ментами конструктора класса. Функция использует специальный синтаксис
вызова с переменным числом аргументов, чтобы создать и вернуть экземпляр.
Остальная часть примера просто определяет два класса и генерирует экзем-
пляры этих классов, передавая классы функции factory. И это единственная
фабричная функция, которую вам придется написать на языке Python, – она
работает с любыми классами и с любыми аргументами конструктора.
Следует заметить, что здесь возможно одно небольшое улучшение, которое за-
ключается в обеспечении поддержки именованных аргументов конструктора;
фабричная функция может собрать их в аргумент **args и передать в вызов
класса в виде третьего аргумента:
def factory(aClass, *args, **kwargs): # +kwargs
return aClass(*args, **kwargs) # Вызвать aClass
К настоящему времени вы должны знать, что в языке ����������������������Python���������������� все сущее явля-
ется «объектом», включая и сами классы, которые в других языках, таких как
С++, являются лишь объявлениями для компилятора. Однако, как упомина-
лось в начале этой части книги, в языке Python только объекты, порожденные
из классов, являются субъектами ООП.