Одно из фундаментальных отличий Python 3.0 от 2.X заключается в том, что
в версии 3.0 делается сильный акцент на использование итераторов. Вдобавок
к тому, что итераторы были ассоциированы со многими встроенными типами
данных, такими как файлы и словари, в Python 3.0 методы keys, values и items
словарей также возвращают итерируемые объекты.  Встроенные функ-
ции range, map, zip и filter возвращают итератор. Как было показано в предыдущем разделе,
три последние функции не только возвращают итераторы, но и выполняют обработку
данных в них. Все эти инструменты в Python 3.0 не создают списки с результа-
тами, как в версии 2.6, а возвращают результаты по требованию.
Итераторы позволяют экономнее расходовать память, однако в некоторых слу-
чаях они могут оказать существенное влияние на стиль программирования.
Например, ранее в этой книге вам уже приходилось видеть, как мы оберты-
вали вызовы различных функций и методов в вызов функции list(...), чтобы
сразу получить все результаты, воспроизводимые итерируемым объектом:
>>> zip(‘abc’, ‘xyz’) # Итератор  в Python 3.0 (список в 2.6)
<zip object at 0x02E66710>
>>> list(zip(‘abc’, ‘xyz’)) # Принудительное создание списка
[(‘a’, ‘x’), (‘b’, ‘y’), (‘c’, ‘z’)] # результатов для отображения в 3.0
Этого не требуется в версии 2.6, потому что функции, такие как zip, возвра-
щают список результатов. Но в версии 3.0 они возвращают итерируемые объ-
екты, которые воспроизводят результаты по требованию. Это означает необхо-
димость ввода дополнительного программного кода для отображения резуль-
татов в интерактивной оболочке (и, возможно, в некоторых других случаях),
однако в крупных программах подобные отложенные вычисления позволяют
экономить память и ликвидировать паузы, необходимые на вычисление длин-
ных списков результатов.