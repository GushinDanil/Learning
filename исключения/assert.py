"""Язык Python включает инструкцию assert в качестве особого случая возбуж-
дения исключений на этапе отладки. Это сокращенная форма типичного ша-
блона использования инструкции raise, которая представляет собой условную
инструкцию raise. Инструкция вида:
assert <test>, <data>   # Часть <data> является необязательной

Другими словами, если условное выражение возвращает ложное значение,
интерпретатор возбуждает исключение: элемент данных (если присутствует)
играет роль аргумента конструктора исключения. Как и все исключения, ис-
ключение AssertionError приводит к завершению программы, если не будет
перехвачено инструкцией try, и в этом случае элемент данных отображается
как часть сообщения об ошибке.

Существует дополнительная возможность удалить все инструкции assert из
скомпилированного байт-кода программы за счет использования флага ко-
мандной строки -O при запуске интерпретатора и тем самым оптимизировать
программу. Исключение AssertionError является встроенным исключением,
а имя __debug__ – встроенным флагом, который автоматически получает значе-
ние True (истина), когда не используется флаг -O. Используйте команду вида python
–O main.py, чтобы запустить программу в оптимизированном режиме и от-
ключить все инструкции assert.

Обычно инструкция assert используется для проверки условий выполнения
программы во время разработки. При отображении в текст сообщений об ошиб-
ках, полученных в результате выполнения инструкции assert, автоматически
включается информация из строки исходного программного кода и значения,
перечисленные в инструкции.

"""

def f(x):
    assert x>0,'x must be positive'
    return x**2
try:
    f(-1)
except AssertionError as A:
    print('Exception caught: ')
    print(A.args)

"""Важно не забывать, что инструкция assert главным образом предназначена
для проверки соблюдения ограничений, накладываемых программистом, а не
для перехвата настоящих ошибок. Так как интерпретатор Python в состоянии
сам выявлять ошибки во время выполнения программы, обычно нет необходи-
мости использовать assert для выявления таких проблем, как выход индекса
за допустимые пределы, несоответствие типов или деление на ноль:

def reciprocal(x):
    assert x != 0 # Бесполезная инструкция assert!
    return 1 / x # Интерпретатор автоматически проверит на равенство нулю

Такие инструкции assert являются лишними, потому что встретив ошибку,
интерпретатор автоматически возбудит исключение, и вы вполне можете по-
ложиться в этом на него.1"""