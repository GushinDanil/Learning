"""Как уже упоминалось выше, классы могут также определять методы, выра-
жающие логическую природу их экземпляров, – в логическом контексте интерпретатор
 сначала пытается напрямую получить логическое значение с по-
мощью метода __bool__ и только потом, если этот метод не реализован, пыта-
ется вызвать метод __len__ , чтобы выяснить истинность объекта, исходя из
его длины. Обычно первый из них возвращает логическое значение, исходя из
значений атрибутов объекта или другой информации:"""


class Truth:
    def __bool__(self):
        # bool(self) #вызовет зацикливание
        return True


obj = Truth()
if obj:
    print('yes')

"""Если этот метод отсутствует, интерпретатор пытается определить длину объек-
та, поскольку непустой объект интерпретируется как истинный (то есть, если
длина не равна нулю, в логическом контексте такому объекту соответствует
значение True, в противном случае – False):"""


class Truth:
    def __len__(self):
        #len(self) #вызовет зацикливание
        return 0



obj = Truth()
print(bool(obj))
"""Если в классе реализованы оба метода, предпочтение отдается методу __bool__,
потому что он является более специализированным:"""

"""Если ни один из методов не определен, объект просто считается истинным (в
чем вполне можно усмотреть смысл, особенно если вы склонны к метафизиче-
ским рассуждениям!"""