class C1:
    num = 10

    def setname(self, who):
        '''первый аргумент с именем self, содержит
        ссылку на обрабатываемый объект экземпляр'''
        self.name = who

        '''Если в классе потребуется гарантировать,
что атрибут, такой как age, всегда будет присутствовать в экземплярах, то та-
кой атрибут должен создаваться на этапе создания класса, как показано ниже'''

    def __init__(self, age):  # создать атрибут age при создании объекта экзапляра класса С1
        '''init срабатывает как только мы вызваем класс с ()'''
        self.age = age
for i,v in enumerate(C1.__dict__):
    """тут пример всех атрибутов класса С1 и их вызов """
    print(i,v)
    print(i,getattr(C1, v))

print(C1.__class__)
print(C1(12).__class__)
print(C1.__bases__)
print(C1.__base__)
print(C1.__name__)




i1 = C1(17)
i2 = C1(21)
i1.num = 0 # создаёт атрибут внутри объекта экземпляра и атрибут класса num уже не будет доступен
i1.setname('Danil')
print(i2.num)


C1.num=100
print(C1.num,i2.num,i1.num) # i1 имеет свой собственный атрибут num а i2 наследует этот атрибут у C1

