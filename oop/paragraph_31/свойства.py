"""
То как было раньше
class classic:
    def __getattr__(self, name):
        if name == ‘age’:
            return 40
        else:
            raise AttributeError

x = classic()
x.age # Вызовет метод __getattr__
40
x.name # Вызовет метод __getattr__
"""

"""
AttributeError
Механизм, известный как свойства, обеспечивает в классах нового стиля еще
один способ определения методов, вызываемых автоматически при обращении
или присваивании атрибутам экземпляра. Эта особенность во многих случаях
представляет собой альтернативу методам перегрузки операторов __getattr__
и __setattr__, которые мы рассматривали в главе 29. Свойства обладают тем же
эффектом, что и эти два метода, только в этом случае выполняется вызов мето-
да даже при простом обращении к атрибуту, что бывает полезно для атрибутов,
значения которых вычисляются динамически. Свойства (и слоты) основаны на
новом понятии дескрипторов атрибутов – темы слишком сложной, чтобы об-
суждать ее здесь.
Проще говоря, свойства – это тип объектов, который присваивается именам
атрибутов класса. Они создаются вызовом встроенной функции property, ко-
торой передаются три метода (обработчики операций чтения, присваивания
и удаления), и строкой документирования – если в каком-либо аргументе пере-
дается значение None, следовательно, эта операция не поддерживается. Опре-
деление свойств обычно производится на верхнем уровне в инструкции class
(например, name = property(...)). Когда выполняется такое присваивание, при
попытке доступа к атрибуту класса (то есть, obj.name) автоматически будет
вызываться один из методов доступа.
"""


class NewProps:
    def get_age(self):
        return 40

    age = property(get_age, None, None, None)  # get,set,del,docs


obj = NewProps()
print(obj.age)
# print(obj.name)   # NewProps instance has no attribute name


"""В некоторых случаях свойства могут быть менее сложными и работать быстрее,
чем при использовании традиционных подходов. Например, когда добавляется
поддержка операции присваивания атрибуту, свойства становятся более при-
влекательными – программный код выглядит компактнее и в операцию при-
сваивания не вовлекаются дополнительные вызовы методов, если не требуется
производить дополнительных вычислений:"""

print('-' * 50)


class NewProps:
    def get_age(self):
        return getattr(self, '_age', 0)

    def set_age(self, val):
        self._age = val

    age = property(get_age, set_age, None, None)  # get,set,del,docs


obj = NewProps()
print(obj.age)
obj.age = 10

print(obj.age)

obj.job = 'trainer'  # Нормальная операция присваивания; нет вызова set_age
print(obj.job)   # Нормальная операция присваивания; нет вызова get_age
