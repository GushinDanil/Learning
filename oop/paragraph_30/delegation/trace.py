"""
В главе 29 говорилось, что метод __getattr__ получает имя атрибута в виде стро-
ки. В этом примере для извлечения из обернутого объекта атрибута, имя кото-
рого представлено в виде строки, используется встроенная функция getattr –
вызов getattr(X, N) аналогичен выражению X.N за исключением того, что N – это
выражение, которое во время выполнения представлено строкой, а не именем
переменной. Фактически вызов getattr(X, N) по его действию можно сравнить
с выражением X.__dict__[N], только в первом случае дополнительно выполняет-
ся поиск в дереве наследования, как в выражении X.N, а во втором – нет (подроб-
нее об атрибуте __dict__ рассказывается в разделе «Словари пространств имен»
в главе 29).
Такой прием, реализованный в этом классе-обертке, можно использовать для
управления доступом к любому объекту с атрибутами – спискам, словарям
и даже к классам и экземплярам. Ниже приводится класс wrapper, который
просто выводит сообщение при каждом обращении к атрибуту и делегирует
этот запрос обернутому(wrapped) объекту wrapped:"""


class Wrapper:
    def __init__(self, wrapped):
        self.wrapped = wrapped

    def __getattr__(self, item):
        """Если атрибута в обёртке нету то мы делегируем
        это обёрнутому объекту"""
        return getattr(self.wrapped, item)


obj = Wrapper([1, 2, 3])
obj.append(4)
print(obj.wrapped)
