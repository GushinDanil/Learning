class AttrDisplay:
    '''Реализует наследуемый метод перегрузки операции вывода, отображающий
    имена классов экземпляров и все атрибуты в виде пар имя=значение,
    имеющиеся в экземплярах (исключая атрибуты, унаследованные от классов).
    Может добавляться в любые классы и способен работать с любыми
    экземплярами.'''

    def gatheAttrs(self):
        attrs = []
        for key, val in self.__dict__.items():
            attrs.append('{0} = {1}'.format(key, val))
        return attrs

    def __str__(self):
        return '{0} : {1}'.format(self.__class__.__name__, self.gatheAttrs())


if __name__ == '__main__':
    class TopTest(AttrDisplay):
        num = 1  # атрибут данных класса

        def __init__(self):
            self.attr1 = TopTest.num + 1
            self.attr2 = TopTest.num + 2
            TopTest.num += 2


    class SubTest(TopTest):
        pass


    obj1 = TopTest()
    obj2 = SubTest()
    print(obj1)
    print(obj2)

    print(obj1.__dict__)  # __dict__ вернёт  только атрибуты
    # определённые пользователем , без атрибутов вида __Х__
    print(dir(obj1))  # вернёт список атрибутов и те которые наследуются из типа класса object __ __
    print(obj2.__class__.__bases__)  # содержит кортеж  всех суперклассов для объекта класса этого экземпляра
'''в версии 3.0 функция dir возвращает большее количе-
ство имен, потому что в этой версии все классы относятся к классам «нового
стиля» и наследуют множество методов перегрузки операторов из типа класса.
На практике вам, скорее всего, потребуется отфильтровать большую часть ме-
тодов, с именами вида __X__, при использовании функции dir в версии 3.0, так
как они относятся к особенностям внутренней реализации классов и не имеют
прямого отношения к информации, которую обычно требуется вывести.'''
