"""Функция map применяет указанную функцию к каждому элементу по-
следовательности и возвращает итерируемый объект, содержащий результаты всех вызовов
функции."""
from functools import reduce


def inc(x):
    return x + 10


counters = [1, 2, 3, 4, 5]
print(list(map(inc, counters)))

print(list(map(lambda x: x + 3, counters)))

'''Пример реализации собственной функции map'''


def mymap(func, x):
    res = [func(i) for i in x]
    return res


'''если мы вкладываем две или больше последовательностей то предполагается что функция 
принимает столько же аргументов сколько и последовательностей
(по одному элементу из каждой последовательности в параметры функции)'''

print(list(map(pow, [1, 2, 3], [1, 2, 3])))


def three(x, y, z):
    return x + y + z


print(list(map(three, [1, 2, 3], [1, 2, 3], [1, 2, 3])))

print(50 * "-")
'''Родственные ей функции отфильтровывают
элементы с помощью функций, выполняющих проверку (filter), и применяют
функции к парам элементов, накапливая результаты (reduce). Например, сле-
дующий вызов функции filter отбирает элементы последовательности больше
нуля:'''

'''Элементы последовательности, для которых применяемая функция возвраща-
ет истину, добавляются в список результатов.'''
print(list(filter(lambda x: x > 0, [-1, 2, -3, 4, -5]))) \

print(list(filter(inc, [1, 2, 3])))  # вернёт всё как было потому что она только фильтрует

'''reduce
На каждом шаге функция reduce передает текущую сумму или произведение
вместе со следующим элементом списка lambda-функции или функции.

Тоесть если нужно получить один объект как результат работы над последовательностью
reduce подойдёт'''
print(reduce(lambda x, y: x + y, [1, 2, 3, 4, 5]))

'''пример реализации встроенной функции reduce'''
def myreduce(func, seq):
    res = seq[0]
    for i in seq[1:]:
        res = func(res, i)
    return res


print(reduce(lambda x, y: x + y, [1]),1)


'''Все эти три функции применяют другую функцию к элементам последова-
тельности (итерируемого объекта) и собирают результаты. Функция map пе-
редает указанной функции каждый элемент исходной последовательности
и собирает все результаты; функция filter отбирает только элементы, для
которых указанная функция возвращает значение True; и функция reduce
вычисляет единственное значение, применяя указанную функцию к нако-
пленному значению и последующим элементам последовательности. Функ-
ция reduce, в отличие от двух других, в версии 3.0 находится не во встроен-
ной области видимости, а в модуле functools'''


