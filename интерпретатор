Интерпретатор – это такой модуль, который исполняет дру-
гие программы. Когда вы пишете код на языке Python, интерпретатор Python
читает вашу программу и выполняет составляющие ее инструкции. По сути
дела интерпретатор – это слой программной логики между вашим программ-
ным кодом и аппаратурой вашего компьютера.


Когда интерпретатор Python получает от вас команду запустить сценарий, он
выполняет несколько промежуточных действий, прежде чем ваш программ-
ный код начнет «скрипеть колесами». В частности, сценарий сначала будет
скомпилирован в нечто под названием «байт-код», а затем передан механизму,
известному под названием «виртуальная машина».


Компиляция в байт-код
Когда вы запускаете программу, практически незаметно для вас Python сна-
чала компилирует ваш исходный текст (инструкции в файле) в формат, из-
вестный под названием байт-код. Компиляция – это просто этап перевода
программы, а байт-код – это низкоуровневое, платформонезависимое пред-
ставление исходного текста программы. Интерпретатор Python транслирует
каждую исходную инструкцию в группы инструкций байт-кода, разбивая ее
на отдельные составляющие. Такая трансляция в байт-код производится для
повышения скорости – байт-код выполняется намного быстрее, чем исходные
инструкции в текстовом файле.
В предыдущем абзаце вы могли заметить фразу – практически незаметно для
вас. Если интерпретатор Python на вашем компьютере обладает правом запи-
си, он будет сохранять байт-код вашей программы в виде файла с расширением
.pyc (.pyc – это компилированный исходный файл .py). Вы будете обнаруживать
эти файлы после запуска программ по соседству с файлами, содержащими ис-
ходные тексты (то есть в том же каталоге).
Интерпретатор сохраняет байт-код для ускорения запуска программ. В сле-
дующий раз, когда вы попробуете запустить свою программу, Python загрузит
файл .pyc и минует этап компиляции – при условии, что исходный текст про-
граммы не изменялся с момента последней компиляции. Чтобы определить,
необходимо ли выполнять перекомпиляцию, Python автоматически сравнит
время последнего изменения файла с исходным текстом и файла с байт-кодом.
Если исходный текст сохранялся на диск после компиляции, при следующем
его запуске интерпретатор автоматически выполнит повторную компиляцию
программы.
Если интерпретатор окажется не в состоянии записать файл с байт-кодом на
диск, программа от этого не пострадает, просто байт-код будет сгенерирован
в памяти и исчезнет по завершении программы.1 Однако поскольку файлы .pyc
повышают скорость запуска программы, вам может потребоваться иметь воз-
можность сохранять их, особенно для больших программ. Кроме того, файлы
с байт-кодом – это еще один из способов распространения программ на языке
Python. Интерпретатор запустит файл .pyc, даже если нет оригинальных фай-
лов с исходными текстами. (В разделе «Фиксированные двоичные файлы» опи-
сывается еще один способ распространения программ).


Виртуальная машина Python (PVM)
Как только программа будет скомпилирована в байт-код (или байт-код будет
загружен из существующих файлов .pyc), он передается механизму под назва-
нием виртуальная машина Python (PVM – для любителей аббревиатур). Аббре-
виатура PVM выглядит более внушительно, чем то, что за ней стоит на самом
деле, – это не отдельная программа, которую требуется устанавливать. Факти-
чески PVM – это просто большой цикл, который выполняет перебор инструк-
ций в байт-коде, одну за одной, и выполняет соответствующие им операции.
PVM – это механизм времени выполнения, она всегда присутствует в составе
системы Python и это тот самый программный компонент, который выполняет
ваши сценарии. Формально – это последняя составляющая того, что называют
«интерпретатором Python».