Ранее мы рассматривали использование функции range для генерации индек-
сов (смещений) элементов в строке вместо получения самих элементов с этими
индексами. Однако в некоторых программах необходимо получить и то, и дру-
гое: и элемент, и его индекс. При традиционном подходе можно было бы ис-
пользовать простой цикл for, в котором вести счетчик текущего индекса:
>>> S = ‘spam’
>>> offset = 0
>>> for item in S:
... print(item, ‘appears at offset’, offset)
... offset += 1
...
s appears at offset 0
p appears at offset 1
a appears at offset 2
m appears at offset 3
Этот способ вполне работоспособен, но в последних версиях языка Python те же
самые действия можно выполнить с помощью встроенной функции с именем
enumerate:
>>> S = ‘spam’
>>> for (offset, item) in enumerate(S):
... print(item, ‘appears at offset’, offset)
...
s appears at offset 0
p appears at offset 1
a appears at offset 2
m appears at offset 3
В заключение 415
Функция enumerate возвращает объект-генератор – разновидность объекта,
который поддерживает протокол итераций, который мы будем рассматривать
в следующей главе, и более подробно будем обсуждать в следующей части кни-
ги. В двух словах: он имеет метод __next__, вызываемый встроенной функцией
next и возвращающий кортеж (index, value) для каждого элемента списка. Мы
можем использовать эти кортежи для присваивания в цикле for (точно так же,
как и в случае с функцией zip):
>>> E = enumerate(S)
>>> E
<enumerate object at 0x02765AA8>
>>> next(E)
(0, ‘s’)
>>> next(E)
(1, ‘p’)
>>> next(E)
(2, ‘a’)
Обычно мы не видим всю эту механику, потому что во всех случаях (включая
генераторы списков – тема главы 14) протокол итераций выполняется автома-
тически:
>>> [c * i for (i, c) in enumerate(S)]
[‘’, ‘p’, ‘aa’, ‘mmm’]
Чтобы окончательно разобраться с такими понятиями итераций, как функции
enumerate, zip и генераторы списков, нам необходимо перейти к следующей гла-
ве, где производится разбор этих понятий с более формальной точки зрения.

E = enumerate(‘spam’) # enumerate возвращает итерируемый объект
>>> E
<enumerate object at 0x0253F508>
>>> I = iter(E)
>>> next(I) # Получить результаты с помощью протокола итераций
(0, ‘s’)
>>> next(I)
(1, ‘p’)
>>> list(enumerate(‘spam’)) # или с помощью функции list
[(0, ‘s’), (1, ‘p’), (2, ‘a’), (3, ‘m’)]