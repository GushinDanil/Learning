'''
lambda – это выражение, а не инструкция. По этой причине ключевое сло-
во lambda может появляться там, где синтаксис языка ������������������Python������������ не позволя-
ет использовать инструкцию def, – внутри литералов или в вызовах функ-
ций, например'''
import sys

'''В lambda-выражениях точно так же можно использовать аргументы со значе-
ниями по умолчанию но нельзя использовать анотации'''
f = lambda x=0, y=0, z=0: print(x + y + z)
f(1, 2, 3)
print(f.__class__)
'''разница между def и lambda в том что первое это инструкция и оно возвращает результат 
работы функции при вызове а второе возвращает объект функции  '''
'''lambda-выражения наиболее полезны в качестве сокращенного варианта ин-
струкции def, когда необходимо вставить маленькие фрагменты исполняемо-
го программного кода туда, где использование инструкций недопустимо(литерал например или генератор какой-либо последовательности )'''

'''lambda-выражения также часто используются для создания таблиц переходов,
которые представляют собой списки или словари действий, выполняемых по
требованию. Например:'''
def a():
    pass
def b(a):
    pass
b(a())
print('-' * 50)
l = [lambda x: x ** 2,  # для def пришлось бы писать 3 функции ложить их в список и только потом вызывать
     lambda x: x ** 3,
     lambda x: x ** 4]


for i in l:
    print(i(2))

# 2 variant

d = {'two': lambda x: x ** 2,
     'three': lambda x: x ** 3,
     'four': lambda x: x ** 4}
d['two'](2)
d['three'](2)
d['four'](2)

print('-' * 50)

'''Это знаменитый пример вложеных функций 
с использованием нелокальных перемнных для сохранения состояния'''


def knights(title):
    action = lambda x: title + ' ' + x
    return action


act = knights("Sir")
print(act('Robert'))
print(act('Tom'))
act = knights("Miss")
print(act('Kardashian'))
print('-' * 50)
'''Лямбда вложенная в лямбду(НЕ ДЕЛАЙ ТАК) ЭТО НЕУДОБНО ЧИТАТЬ'''
action = lambda x: lambda y: x + y
act = action(99)
print(act(2))
print('-' * 50)
a = filter(lambda x: x > 0, list(range(-5, 5)))
print(list(a))

showall = lambda x: [sys.stdout.write(i) for i in x]
showall(["Hello ", "Lambda ", "Func"])
