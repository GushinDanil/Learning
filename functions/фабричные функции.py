'''фабричные функции иногда используются в программах, когда не-
обходимо создавать обработчики событий прямо в процессе выполнения, в со-
ответствии со сложившимися условиями (например, когда желательно запре-
тить пользователю вводить данные). Рассмотрим в качестве примера следую-
щую функцию:'''



def first(n):
    def second(x,n=n):
        print(x**n)

    return second


action=first(2)
action(2)# здесь работает только функция second
action(3)
action2=first(3)
action2(2)
action2(3)

action(4)

'''Такое возможно благодаря тому, что при каждом обращении к фабричной
функции, как в данном примере, произведенные ею функции сохраняют свой
собственный блок данных с информацией о состоянии.'''


'''Существует одно известное исключение из правила, которое я только что дал:
если lambda-выражение или инструкция def вложены в цикл внутри другой
функции и вложенная функция ссылается на переменную из объемлющей об-
ласти видимости, которая изменяется в цикле, все функции, созданные в этом
цикле, будут иметь одно и то же значение – значение, которое имела перемен-
ная на последней итерации.

Это один из случаев, когда необходимо явно сохранять значение из объемлю-
щей области видимости в виде аргумента со значением по умолчанию вместо
использования ссылки на переменную из объемлющей области видимости.'''