'''aннотация – произвольные данные об аргумен-
тах функции и о возвращаемом значении(МОЁ МНЕНИЕ ЭТО СИНТАКСИЧЕСКИЙ САХАР)'''
'''Синтаксически аннотации функций находятся в заголовках инструкций def,
в виде произвольных выражений, ассоциированных с аргументами и возвра-
щаемыми значениями. Аннотации для аргументов указываются через двоето-
чие, сразу после имени аргумента. Для возвращаемого значения – после сим-
волов ->, вслед за списком аргументов. В следующем примере были добавлены
аннотации ко всем трем аргументам и возвращаемому значению предыдущей
функции:'''

'''a: 'spam' = 4 означает, что аргумент a по умолчанию
получает значение 4 и аннотирован строкой ‘spam’'''


def func(a: 'spam' = 1, b: (1, 10) = 2, c: float = 3, d: int = 4) -> int:
    return a + b + c


'''Вызов аннотированной функции ничем не отличается от вызова обычной функ-
ции, но если в объявлении функции присутствуют аннотации, интерпретатор
соберет их в словарь и присоединит его к объекту функции. Имена аргументов
станут ключами, аннотация возвращаемого значения будет сохранена в ключе
'return' а значениям ключей этого словаря будут результаты вы-
ражений в аннотациях:'''

print(func.__annotations__)

for key, value in func.__annotations__.items():
    print(key, ' => ', value)
print(False + True)

print([1, 2, 3] == [1, 2, 3])
