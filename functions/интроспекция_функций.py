

def func(a):
    b='spam'
    print(func.count)
    return a*b
print(dir(func))

print(func.__name__)
print(func.__code__.co_varnames)
print(func.__code__.co_argcount,': count of arguments(co_argcount)') # a


'''Перечень атрибутов, которые могут иметь объекты функций, не ограничива-
ется предопределенными атрибутами, которые были перечислены.K функциям можно присоединять
и свои атрибуты:'''
func.count = 0 # создание атрибута для объекта функции
func.count+=1
print(func.count)


func.danil_attribute='Gushchin'
print(dir(func)) # в конце новые атрибуты

'''Tакие атрибуты можно использовать
для хранения информации о состоянии непосредственно в объекте функции
и отказаться от использования других приемов, таких как применение гло-
бальных или нелокальных переменных и классов. В отличие от нелокальных
переменных, атрибуты функций доступны в любом месте программы, где до-
ступна сама функция. В некотором смысле атрибуты можно рассматривать,
как имитацию «статических локальных переменных», имеющихся в других
языках программирования, – переменных, которые являются локальными
для функции, но сохраняют свои значения после выхода из функции. Атрибу-
ты связаны с объектами, а не с областями видимости, но конечный эффект от
их использования получается тот же.'''



'''ты можешь создавать собственные атрибуты и хранить в них значения 
которые будут доступны там где можено вызвать эту функцию'''