Одним из новейших средств JavaScript, определенных в ES2020, является чис
ловой тип под названием Bigint. По состоянию на начало 2020 года он был
внедрен в Chrome, Firefox, Edge и Node плюс готовилась реализация в Safari. Как
следует из названия, Bigint — это числовой тип с целыми значениями. Тип
Bigint был добавлен в JavaScript главным образом для того, чтобы сделать воз
можным представление 64-битных целых чисел, которое требуется для совмес
тимости со многими другими языками программирования и API-интерфейсами.
Но значения Bigint могут иметь тысячи и даже миллионы цифр, если вам
действительно необходимо работать с настолько большими числами.

Литералы BigInt записываются как строка цифр, за которой следует буква
п в нижнем регистре. По умолчанию они десятичные, но можно применять пре
фиксы 0Ь, Оо и Ох для двоичных, восьмеричных и шестнадцатеричных BigInt:
1234п
Oblllllln
0о7777п
0х8000000000000000п
/ / Н е настолько большой литерал Bigint
// Двоичный литерал Bigint
// Восьмеричный литерал Bigint
// => 2п**63п: 64-битное целое
Для преобразования обыкновенных чисел или строк JavaScript в значения
BigInt можно использовать функцию BigInt():
Bigint (Number.MAX_SAFE_INTEGER)
let string = "l” + "0" .repeat (100);
Bigint(string)
/•/ => 9007199254740991n
// 1 со следующими 100 нулями
// => 10n**100n: один гугол
Арифметические действия со значениями BigInt работают подобно ариф
метическим действиям с обыкновенными числами JavaScript за исключением
того, что деление отбрасывает любой остаток и округляет в меньшую сторону
(по направлению к нулю)

Хотя стандартные операции + , - , * , / , % и ** работают с B ig in t, важно по
нимать, что смешивать операнды типа BigInt с обычными числовыми опе
рандами нельзя. Поначалу это может показаться странным, но для этого есть
все основания. Если бы один числовой тип был более общим, чем другой, то
определить арифметические действия на смешанных операндах было бы легче,
просто возвращая значение более общего типа. Однако ни один из типов не
является более общим, чем другой.

В длинных числовых литералах можно применять подчеркивания, чтобы
разбивать их на порции, которые легче для восприятия:

let billion = 1_000_000_000; // Подчеркивание как разделитель тысяч,
