Объект является фундаментальным типом данных в языке JavaScript. Объект –
это составное значение: он объединяет в себе набор значений (простых значений
или других объектов) и позволяет сохранять и извлекать эти значения по име
нам. Объект является неупорядоченной коллекцией свойств, каждое из которых
имеет имя и значение. Имена свойств являются строками, поэтому можно ска
зать, что объекты отображают строки в значения. Такое отображение строк в зна
чения может называться по-разному: возможно, вы уже знакомы с такой фунда
ментальной структурой данных, как «хеш», «словарь» или «ассоциативный мас
сив». Однако объект представляет собой нечто большее, чем простое отображение
строк в значения. Помимо собственных свойств объекты в языке JavaScript могут
также наследовать свойства от других объектов, известных под названием «про
тотипы». Методы объекта – это типичные представители унаследованных свойств,
а «наследование через прототипы» является ключевой особенностью языка Java
Script.
Объекты в языке JavaScript являются динамическими – обычно они позволяют
добавлять и удалять свойства – но они могут использоваться также для имита
ции статических объектов и «структур», которые имеются в языках программи
рования со статической системой типов. Кроме того, они могут использоваться
(если не учитывать, что объекты отображают строки в значения) для представле
ния множеств строк.
Любое значение в языке JavaScript, не являющееся строкой, числом, true, false,
null или undefined, является объектом. И даже строки, числа и логические значе
ния, не являющиеся объектами, могут вести себя как неизменяемые объекты
(раздел 3.6).
Как вы помните, в разделе 3.7 говорилось, что объекты являются изменяемыми
значениями и операции с ними выполняются по ссылке, а не по значению. Если
переменная x ссылается на объект, и выполняется инструкция var y = x;, в пере
менную y будет записана ссылка на тот же самый объект, а не его копия. Любые
изменения, выполняемые в объекте с помощью переменной y, будут также отра
жаться на переменной x.Объект является фундаментальным типом данных в языке JavaScript. Объект –
это составное значение: он объединяет в себе набор значений (простых значений
или других объектов) и позволяет сохранять и извлекать эти значения по име
нам. Объект является неупорядоченной коллекцией свойств, каждое из которых
имеет имя и значение. Имена свойств являются строками, поэтому можно ска
зать, что объекты отображают строки в значения. Такое отображение строк в зна
чения может называться по-разному: возможно, вы уже знакомы с такой фунда
ментальной структурой данных, как «хеш», «словарь» или «ассоциативный мас
сив». Однако объект представляет собой нечто большее, чем простое отображение
строк в значения. ПоОбъект является фундаментальным типом данных в языке JavaScript. Объект –
это составное значение: он объединяет в себе набор значений (простых значений
или других объектов) и позволяет сохранять и извлекать эти значения по име
нам. Объект является неупорядоченной коллекцией свойств, каждое из которых
имеет имя и значение. Имена свойств являются строками, поэтому можно ска
зать, что объекты отображают строки в значения. Такое отображение строк в зна
чения может называться по-разному: возможно, вы уже знакомы с такой фунда
ментальной структурой данных, как «хеш», «словарь» или «ассоциативный мас
сив». Однако объект представляет собой нечто большее, чем простое отображение
строк в значения. Помимо собственных свойств объекты в языке JavaScript могут
также наследовать свойства от других объектов, известных под названием «про
тотипы». Методы объекта – это типичные представители унаследованных свойств,
а «наследование через прототипы» является ключевой особенностью языка Java
Script.
Объекты в языке JavaScript являются динамическими – обычно они позволяют
добавлять и удалять свойства – но они могут использоваться также для имита
ции статических объектов и «структур», которые имеются в языках программи
рования со статической системой типов. Кроме того, они могут использоваться
(если не учитывать, что объекты отображают строки в значения) для представле
ния множеств строк.
Любое значение в языке JavaScript, не являющееся строкой, числом, true, false,
null или undefined, является объектом. И даже строки, числа и логические значе
ния, не являющиеся объектами, могут вести себя как неизменяемые объекты
(раздел 3.6).
Как вы помните, в разделе 3.7 говорилось, что объекты являются изменяемыми
значениями и операции с ними выполняются по ссылке, а не по значению. Если
переменная x ссылается на объект, и выполняется инструкция var y = x;, в пере
менную y будет записана ссылка на тот же самый объект, а не его копия. Любые
изменения, выполняемые в объекте с помощью переменной y, будут также отра
жаться на переменной x.мимо собственных свойств объекты в языке JavaScript могут
также наследовать свойства от других объектов, известных под названием «про
тотипы». Методы объекта – это типичные представители унаследованных свойств,
а «наследование через прототипы» является ключевой особенностью языка Java
Script.



Наиболее типичными операциями с объектами являются создание объектов, на
значение, получение, удаление, проверка и перечисление их свойств. Эти базовые
операции описываются в начальных разделах этой главы. В следующих за ними
разделах будут рассматриваться более сложные темы, многие из которых имеют
прямое отношение к стандарту ECMAScript 5.
Свойство имеет имя и значение. Именем свойства может быть любая строка,
включая и пустую строку, но объект не может иметь два свойства с одинаковыми
именами. Значением свойства может быть любое значение, допустимое в языке
JavaScript, или (в ECMAScript 5) функция чтения или записи (или обе). Поближе
с функциями чтения и записи свойств мы познакомимся в разделе 6.6. В дополне
ние к именам и значениям каждое свойство имеет ряд ассоциированных с ним
значений, которые называют атрибутами свойства:
• Атрибут writable определяет доступность значения свойства для записи.
• Атрибут enumerable определяет доступность имени свойства для перечисления
в цикле for/in.
• Атрибут configurable определяет возможность настройки, т. е. удаления свой
ства и изменения его атрибутов.
До появления стандарта ECMAScript 5 все свойства в объектах, создаваемые про
граммой, доступны для записи, перечисления и настройки. В ECMAScript 5 пре
дусматривается возможность настройки атрибутов ваших свойств. Как это дела
ется, описывается в разделе 6.7.
В дополнение к свойствам каждый объект имеет три атрибута объекта:
• Атрибут prototype содержит ссылку на другой объект, от которого наследуют
ся свойства.
• Атрибут class содержит строку с именем класса объекта и определяет тип объ
екта.
• Флаг extensible (в ECMAScript 5) указывает на возможность добавления но
вых свойств в объект.
Поближе с прототипами и механизмом наследования свойств мы познакомимся
в разделах 6.1.3 и 6.2.2, а более детальное обсуждение всех трех атрибутов объек
тов вы найдете в разделе 6.8.
Наконец, ниже приводится описание некоторых терминов, которые помогут нам
различать три обширные категории объектов в языке JavaScript и два типа свойств:
• Объект базового языка – это объект или класс объектов, определяемый спе
цификацией ECMAScript. Массивы, функции, даты и регулярные выражения
(например) являются объектами базового языка.
• Объект среды выполнения – это объект, определяемый средой выполнения (та
кой как веб-броузер), куда встроен интерпретатор JavaScript. Объекты HTMLEle
ment, представляющие структуру веб-страницы в клиентском JavaScript, яв
ляются объектами среды выполнения. Объекты среды выполнения могут так
же быть объектами базового языка, например, когда среда выполнения опре
деляет методы, которые являются обычными объектами Function базового
языка JavaScript.
• Пользовательский объект – любой объект, созданный в результате выполне
ния программного кода JavaScript.
• Собственное свойство – это свойство, определяемое непосредственно в дан
ном объекте.
• Унаследованное свойство – это свойство, определяемое прототипом объекта.




6.1. Создание объектов
Объекты можно создавать с помощью литералов объектов, ключевого слова new
и (в ECMAScript 5) функции Object.create(). Все эти приемы описываются в сле
дующих разделах.


Попытка обращения к несуществующему свойству не считается ошибкой. Если
свойство x не будет найдено среди собственных или унаследованных свойств объ
екта o, выражение обращения к свойству o.x вернет значение undefined.
Однако попытка обратиться к свойству несуществующего объекта считается ошиб
кой. Значения null и undefined не имеют свойств, и попытки обратиться к свойст
вам этих значений считаются ошибкой.