// 5.7.1. Инструкция with
// В разделе 3.10.3 мы обсуждали область видимости переменных и цепочки облас
// тей видимости – список объектов, в которых выполняется поиск при разрешении
// имен переменных. Инструкция with используется для временного изменения це
// почки областей видимости. Она имеет следующий синтаксис:
// with (объект)
//     инструкция
// Эта инструкция добавляет объект в начало цепочки областей видимости, выпол
// няет инструкцию, а затем восстанавливает первоначальное состояние цепочки.
// Инструкция with не может использоваться в строгом режиме (раздел 5.7.3) и не
// рекомендуется к использованию в нестрогом режиме: избегайте ее использова
// ния по мере возможности. Программный код JavaScript, в котором используется
// инструкция with, сложнее поддается оптимизации и наверняка будет работать
// медленнее, чем эквивалентный программный код без инструкции with.
// На практике инструкция with упрощает работу с глубоко вложенными иерархия
// ми объектов. В клиентском JavaScript вам наверняка придется вводить выраже
// ния, как показано ниже, чтобы обратиться к элементам HTML-формы:
document.forms[0].address.value132
// Глава 5. Инструкции
// Если подобные выражения потребуется записать много раз, можно воспользо
// ваться инструкцией with, чтобы добавить объект формы в цепочку областей види
// мости:
with(document.forms[0]) {
    // Далее следуют обращения к элементам формы непосредственно, например:
    name.value = "";
    address.value = "";
    email.value = "";
}
// Этот прием сокращает объем текста программы – больше не надо указывать
// фрагмент document.forms[0] перед каждым именем свойства. Этот объект представ
// ляет собой временную часть цепочки областей видимости и автоматически участ
// вует в поиске, когда JavaScript требуется разрешить идентификаторы, такие как
// address. Избежать применения инструкции with достаточно просто, если записать
// предыдущий пример, как показано ниже:
var f = document.forms[0];
f.name.value = "";
f.address.value = "";
f.email.value = "";
// Имейте в виду, что цепочка областей видимости используется только для поиска
// идентификаторов и не используется при их создании. Взгляните на следующий
// пример:
with(o) x = 1;
// Если объект o имеет свойство x, то данный программный код присвоит значение 1
// этому свойству. Но если x не является свойством объекта o, данный программный
// код выполнит то же действие, что и инструкция x = 1 без инструкции with. Он
// присвоит значение локальной или глобальной переменной с именем x или создаст
// новое свойство глобального объекта. Инструкция with обеспечивает более корот
// кую форму записи операций чтения свойств объекта o, но не создания новых
// свойств этого объекта.